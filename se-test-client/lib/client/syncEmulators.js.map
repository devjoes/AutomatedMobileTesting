{"version":3,"sources":["../../src/client/syncEmulators.js"],"names":["getBrowsers","r","map","Object","values","n","protocols","browsers","host","keys","b","filter","Array","isArray","k","type","name","capabilities","getEmulators","data","reduce","acc","concat","maxInstances","udid","substr","i","syncEmulators","intervalMs","Promise","config","seleniumUrl","headers","seleniumHeaders","finally","setTimeout","res","catch","console","warn","then","json","updateEmulators","j","nodes"],"mappings":"2EAAA,uC;AACA,mC;;AAEA,IAAMA,cAAc,SAAdA,WAAc;AAClBC,MAAEC,GAAF,CAAM,qBAAKC,OAAOC,MAAP,CAAcC,EAAEC,SAAF,CAAY,YAAZ,EAA0BC,QAAxC,EAAkD,CAAlD,CAAL,EAAN;AACCL,OADD,CACK,aAAK;AACR,UAAMM,OAAOL,OAAOM,IAAP,CAAYC,CAAZ,EAAeC,MAAf,CAAsB,qBAAKC,MAAMC,OAAN,CAAcH,EAAEI,CAAF,CAAd,CAAL,EAAtB,EAAgD,CAAhD,CAAb;AACA,aAAO;AACLC,cAAML,EAAEM,IADH;AAELR,kBAFK;AAGLS,sBAAcP,EAAEF,IAAF,EAAQ,CAAR,EAAWS,YAHpB,EAAP;;AAKD,KARD,CADkB,GAApB;;AAWA,IAAMC,eAAe,SAAfA,YAAe;AACnBlB,gBAAYmB,IAAZ;AACCR,UADD,CACQ,qBAAKD,EAAEK,IAAF,KAAW,SAAhB,EADR;AAECK,UAFD,CAEQ,UAACC,GAAD,EAAMX,CAAN;AACNW,YAAIC,MAAJ,CAAW,6BAAI,IAAIV,KAAJ,CAAUF,EAAEO,YAAF,CAAeM,YAAzB,EAAuCd,IAAvC,EAAJ;AACRP,WADQ,CACJ,qBAAM;AACTa,kBAAML,EAAEK,IADC;AAETP,kBAAME,EAAEF,IAFC;AAGTgB,kBAAMd,EAAEF,IAAF,CAAOiB,MAAP,CAAc,CAAd,IAAmB,GAAnB,GAAyBC,CAAzB,GAA6B,OAH1B,EAAN,EADI,CAAX,CADM,GAFR;AAQU,MARV,CADmB,GAArB;;AAWA,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACR,IAAD,EAAOS,UAAP,UAAsB,IAAIC,OAAJ,CAAY;AACtD,+BAAMC,iBAAOC,WAAP,GAAqB,sBAA3B,EAAmD;AACjDC,iBAASF,iBAAOG,eADiC,EAAnD;;AAGCC,aAHD,CAGS,YAAM;AACZC,mBAAW,oBAAMR,cAAcR,IAAd,EAAoBS,UAApB,CAAN,EAAX,EAAkDA,UAAlD;AACAQ;AACF,OAND;AAOCC,WAPD,CAOOC,QAAQC,IAPf;AAQCC,UARD,CAQM,qBAAKvC,EAAEwC,IAAF,EAAL,EARN;AASCD,UATD,CASM,qBAAKrB,KAAKuB,eAAL,CAAqBxB,aAAayB,EAAEC,KAAf,CAArB,CAAL,EATN,CADsD,GAAZ,CAAtB,EAAtB,C;;;AAaejB,a;;AAEf","file":"syncEmulators.js","sourcesContent":["import fetch from 'node-fetch';\r\nimport config from '../config';\r\n\r\nconst getBrowsers = r =>\r\n  r.map(n => Object.values(n.protocols['web_driver'].browsers)[0])\r\n  .map(b => {\r\n    const host = Object.keys(b).filter(k => Array.isArray(b[k]))[0];\r\n    return {\r\n      type: b.name,\r\n      host,\r\n      capabilities: b[host][0].capabilities\r\n    }\r\n  });\r\n\r\nconst getEmulators = data =>\r\n  getBrowsers(data)\r\n  .filter(b => b.type === 'android')\r\n  .reduce((acc, b) =>\r\n    acc.concat([...new Array(b.capabilities.maxInstances).keys()]\r\n      .map(i => ({\r\n        type: b.type,\r\n        host: b.host,\r\n        udid: b.host.substr(5) + '_' + i + ':5555'\r\n      }))), []);\r\n\r\nconst syncEmulators = (data, intervalMs) => new Promise(res =>\r\n  fetch(config.seleniumUrl + '/grid/admin/Console/', {\r\n    headers: config.seleniumHeaders\r\n  })\r\n  .finally(() => {\r\n     setTimeout(() => syncEmulators(data, intervalMs), intervalMs);\r\n     res();\r\n  })\r\n  .catch(console.warn)\r\n  .then(r => r.json())\r\n  .then(j => data.updateEmulators(getEmulators(j.nodes)))\r\n);\r\n\r\nexport default syncEmulators;\r\n\r\n/*\r\n{\r\n  \"nodes\": [\r\n    {\r\n      \"protocols\": {\r\n        \"web_driver\": {\r\n          \"browsers\": {\r\n            \"android\": {\r\n              \"name\": \"android\",\r\n              \"node-droid722700001J\": [ {}, {}, {} ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\n*/"]}