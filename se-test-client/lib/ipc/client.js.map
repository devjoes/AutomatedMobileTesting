{"version":3,"sources":["../../src/ipc/client.js"],"names":["ipc","config","id","retry","sync","silent","getEmulator","Promise","connectTo","of","testing","on","emit","clientId","res","e","disconnect","releaseEmulator","udid"],"mappings":"2EAAA,mC;;AAEAA,kBAAIC,MAAJ,CAAWC,EAAX,GAAgB,SAAhB;AACAF,kBAAIC,MAAJ,CAAWE,KAAX,GAAmB,IAAnB;AACAH,kBAAIC,MAAJ,CAAWG,IAAX,GAAkB,IAAlB;AACAJ,kBAAIC,MAAJ,CAAWI,MAAX,GAAoB,IAApB,C;;AAEe,4BAAa;AACxBC,qBAAa,+BAAM,IAAIC,OAAJ,CAAY,eAAO;AAClCP,kCAAIQ,SAAJ;AACIR,kCAAIC,MAAJ,CAAWC,EADf;AAEI,4BAAM;AACFF,sCAAIS,EAAJ,CAAOC,OAAP,CAAeC,EAAf;AACI,6BADJ;AAEI,gCAAY;AACRX,0CAAIS,EAAJ,CAAOC,OAAP,CAAeE,IAAf,CAAoB,cAApB,EAAoC;AAChCC,8CADgC,EAApC;;AAGH,qBANL;AAOAb,sCAAIS,EAAJ,CAAOC,OAAP,CAAeC,EAAf;AACI,0CAAsBE,QAD1B;AAEI,iCAAK;AACDC,4BAAIC,CAAJ;AACAf,0CAAIgB,UAAJ,CAAehB,kBAAIC,MAAJ,CAAWC,EAA1B;AACH,qBALL;;AAOH,iBAjBL;;AAmBH,aApBkB,CAAN,EADW;AAsBxBe,yBAAiB,uCAAQ,IAAIV,OAAJ,CAAY,eAAO;AACxCP,kCAAIQ,SAAJ;AACIR,kCAAIC,MAAJ,CAAWC,EADf;AAEI,oCAAMF,kBAAIS,EAAJ,CAAOC,OAAP,CAAeC,EAAf;AACE,6BADF;AAEE,gCAAY;AACRX,0CAAIS,EAAJ,CAAOC,OAAP,CAAeE,IAAf,CAAoB,kBAApB,EAAwC;AACpCM,sCADoC,EAAxC;;AAGAJ;AACAd,0CAAIgB,UAAJ,CAAehB,kBAAIC,MAAJ,CAAWC,EAA1B;AACH,qBARH,CAAN,EAFJ;;AAYH,aAbwB,CAAR,EAtBO,EAAb,E","file":"client.js","sourcesContent":["import ipc from 'node-ipc';\r\n\r\nipc.config.id = 'testing';\r\nipc.config.retry = 1500;\r\nipc.config.sync = true;\r\nipc.config.silent = true;\r\n\r\nexport default clientId => ({\r\n    getEmulator: () => new Promise(res => {\r\n        ipc.connectTo(\r\n            ipc.config.id,\r\n            () => {\r\n                ipc.of.testing.on(\r\n                    'connect',\r\n                    function () {\r\n                        ipc.of.testing.emit('get_emulator', {\r\n                            clientId\r\n                        });\r\n                    });\r\n                ipc.of.testing.on(\r\n                    'got_emulator_for_' + clientId,\r\n                    e => {\r\n                        res(e);\r\n                        ipc.disconnect(ipc.config.id);\r\n                    }\r\n                );\r\n            }\r\n        );\r\n    }),\r\n    releaseEmulator: udid => new Promise(res => {\r\n        ipc.connectTo(\r\n            ipc.config.id,\r\n            () => ipc.of.testing.on(\r\n                    'connect',\r\n                    function () {\r\n                        ipc.of.testing.emit('release_emulator', {\r\n                            udid\r\n                        });\r\n                        res();\r\n                        ipc.disconnect(ipc.config.id);\r\n                    })\r\n        );\r\n    })\r\n});"]}