{"version":3,"sources":["../src/emulatorData.js"],"names":["emulators","getEmulator","availableEms","Object","values","filter","e","readyBy","Date","getTime","queueLength","config","maxQueueLength","length","Math","round","random","incrementQueueLength","udid","emulatorUpdateCoolOffMs","decrementQueueLength","updateEmulators","newEmulators","reduce","acc","em","oldEmulator","assign","updateQueueLengths","queueLengths","keys","forEach","k"],"mappings":"2EAAA,kC;;AAEe,oBAAO;AAClBA,mBAAW,EADO;AAElBC,qBAAa,uBAAY;AACrB,gBAAMC,eAAeC,OAAOC,MAAP,CAAc,KAAKJ,SAAnB;AAChBK,kBADgB,CACT,qBAAKC,EAAEC,OAAF,GAAY,IAAIC,IAAJ,GAAWC,OAAX,EAAZ,IAAoCH,EAAEI,WAAF,GAAgBC,iBAAOC,cAAhE,EADS,CAArB;AAEA,mBAAOV,aAAaW,MAAb;AACHX,yBAAaY,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,IAA3B,IAAmCd,aAAaW,MAA7D,CADG;AAEH,gBAFJ;AAGH,SARiB;AASlBI,8BAAsB,8BAAUC,IAAV,EAAgB;AAClC,iBAAKlB,SAAL,CAAekB,IAAf,EAAqBR,WAArB;AACA;AACA,iBAAKV,SAAL,CAAekB,IAAf,EAAqBX,OAArB,GAA+B,IAAIC,IAAJ,GAAWC,OAAX,KAAuBE,iBAAOQ,uBAA7D;AACH,SAbiB;AAclBC,8BAAsB,8BAAUF,IAAV,EAAgB;AAClC,iBAAKlB,SAAL,CAAekB,IAAf,EAAqBR,WAArB;AACH,SAhBiB;AAiBlBW,yBAAiB,yBAAUC,YAAV,EAAwB;AACrC,iBAAKtB,SAAL,GAAiBsB;AACZC,kBADY,CACL,UAACC,GAAD,EAAMC,EAAN,EAAa;AACjB,oBAAMC,cAAc,CAAC,MAAK1B,SAAL,IAAkB,EAAnB,EAAuByB,GAAGP,IAA1B,CAApB;AACAM,oBAAIC,GAAGP,IAAP,IAAef,OAAOwB,MAAP,CAAc,EAAd,EAAkBF,EAAlB,EAAsB;AACjC;AACAlB,6BAASmB,eAAeA,YAAYnB,OAA3B,IAAuC,IAAIC,IAAJ,GAAWC,OAAX,KAAuBE,iBAAOQ,uBAF7C;AAGjCT,iCAAagB,eAAeA,YAAYhB,WAA3B,IAA0C,CAHtB,EAAtB,CAAf;;AAKA,uBAAOc,GAAP;AACH,aATY,EASV,EATU,CAAjB;AAUH,SA5BiB;AA6BlBI,4BAAoB,4BAAUC,YAAV,EAAwB;AACxC1B,mBAAO2B,IAAP,CAAY,KAAK9B,SAAjB,EAA4B+B,OAA5B,CAAoC,aAAK;AACrC,uBAAK/B,SAAL,CAAegC,CAAf,EAAkBtB,WAAlB,GAAgCmB,aAAaG,CAAb,KAAmB,CAAnD;AACA;AACA,uBAAKhC,SAAL,CAAegC,CAAf,EAAkBzB,OAAlB,GAA4B,IAAIC,IAAJ,GAAWC,OAAX,EAA5B;AACH,aAJD;AAKH,SAnCiB,EAAP,E","file":"emulatorData.js","sourcesContent":["import config from './config';\r\n\r\nexport default () => ({\r\n    emulators: {},\r\n    getEmulator: function () {\r\n        const availableEms = Object.values(this.emulators)\r\n            .filter(e => e.readyBy < new Date().getTime() && e.queueLength < config.maxQueueLength);\r\n        return availableEms.length ?\r\n            availableEms[Math.round(Math.random() * 1000) % availableEms.length] :\r\n            null;\r\n    },\r\n    incrementQueueLength: function (udid) {\r\n        this.emulators[udid].queueLength++;\r\n        // Before we inform selenium syncRequests might run and reset this value\r\n        this.emulators[udid].readyBy = new Date().getTime() + config.emulatorUpdateCoolOffMs;\r\n    },\r\n    decrementQueueLength: function (udid) {\r\n        this.emulators[udid].queueLength--;\r\n    },\r\n    updateEmulators: function (newEmulators) {\r\n        this.emulators = newEmulators\r\n            .reduce((acc, em) => {\r\n                const oldEmulator = (this.emulators || {})[em.udid];\r\n                acc[em.udid] = Object.assign({}, em, {\r\n                    // If the emulator is new then let it warm up\r\n                    readyBy: oldEmulator && oldEmulator.readyBy || (new Date().getTime() + config.emulatorUpdateCoolOffMs),\r\n                    queueLength: oldEmulator && oldEmulator.queueLength || 0\r\n                });\r\n                return acc;\r\n            }, {});\r\n    },\r\n    updateQueueLengths: function (queueLengths) {\r\n        Object.keys(this.emulators).forEach(k => {\r\n            this.emulators[k].queueLength = queueLengths[k] || 0;\r\n            // Reset readyBy, set in incrementQueueLength\r\n            this.emulators[k].readyBy = new Date().getTime()\r\n        });\r\n    }\r\n});"]}